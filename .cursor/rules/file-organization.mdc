---
description: When creating a file or a directory
globs: 
alwaysApply: false
---
# File Organization & Naming Conventions

## Directory Structure
The project follows a feature-based organization with clear separation of concerns:

### Core Directories
- [app/](mdc:app) - Expo Router pages and layouts
- [components/](mdc:components) - Shared, reusable components
- [services/](mdc:services) - API calls and business logic
- [context/](mdc:context) - React Context providers
- [store/](mdc:store) - Global state management
- [utils/](mdc:utils) - Utility functions and helpers
- [lib/](mdc:lib) - Third-party integrations and configurations

### Specific Patterns
- Route groups use parentheses: `(api)`, `(drawer)`, `(tabs)`
- Component-specific folders end with underscore: `_components/`
- Feature-specific components: [app/(drawer)/(tabs)/_components/attraction-carousel/](mdc:app/(drawer)/(tabs)/_components/attraction-carousel/)

## File Naming Conventions
- **Components**: PascalCase for files and exports (`AttractionCard.tsx`)
- **Utilities**: camelCase (`formatDate.ts`)
- **Types**: kebab-case with extension (`attraction.type.ts`)
- **Hooks**: camelCase with extension (`useAttraction.hook.ts`)
- **Contexts**: PascalCase with extension (`ThemeContext.context.tsx`)
- **Services**: kebab-case directories with camelCase files (`places/getAttractions.ts`)

## File Extensions
- `.tsx` - React components
- `.ts` - TypeScript files without JSX
- `.type.ts` - Type definitions
- `.hook.ts` - Custom hooks
- `.context.tsx` - Context providers
- `.config.ts` - Configuration files
- `.test.ts/.test.tsx` - Test files

## Import Organization
```typescript
// 1. React and React Native imports
import React from 'react'
import { View, Text } from 'react-native'

// 2. Third-party libraries
import { useRouter } from 'expo-router'

// 3. Internal imports (services, utils, etc.)
import { getAttractions } from '@/services/places'
import { formatDate } from '@/utils'

// 4. Relative imports
import { AttractionCard } from './AttractionCard'
```

## Component File Structure
```typescript
// 1. Imports
// 2. Exported main component
// 3. Subcomponents (if any)
// 4. Helper functions
// 5. Static content/constants
// 6. Type definitions (if not in separate file)
```

## Asset Organization
- [assets/](mdc:assets) - Static assets (images, fonts, etc.)
- [lib/icons/](mdc:lib/icons) - Icon components and configurations
- [lib/theme/](mdc:lib/theme) - Theme-related utilities

## Path Aliases
Configure path aliases in [tsconfig.json](mdc:tsconfig.json) for cleaner imports:
- `@/` - Root directory
- `@/components` - Components directory
- `@/services` - Services directory
- `@/utils` - Utils directory
