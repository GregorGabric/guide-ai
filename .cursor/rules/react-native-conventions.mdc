---
description: 
globs: 
alwaysApply: false
---
# React Native & Expo Development Conventions

## Code Style & Structure
- Use **functional components** with TypeScript
- Prefer **interfaces over types** for component props
- Use **descriptive variable names** with auxiliary verbs (e.g., `isLoading`, `hasError`)
- File structure: Exported component, subcomponents, helpers, static content, types

## React Native Specific Patterns
- Use `View`, `Text`, `ScrollView`, etc. from `react-native`
- Implement proper `SafeAreaView` usage for device compatibility
- Use `Pressable` instead of `TouchableOpacity` for modern touch handling
- Handle platform differences with `Platform.OS` when necessary

## Expo Router Navigation
- Use file-based routing in the [app/](mdc:app) directory
- Implement proper navigation with `expo-router`
- Use parentheses for route groups: `(tabs)`, `(drawer)`, `(api)`
- Place layout files as `_layout.tsx` in appropriate directories

## Styling with NativeWind
- Use Tailwind CSS classes with NativeWind
- Reference [tailwind.config.js](mdc:tailwind.config.js) for custom configuration
- Implement responsive design with Tailwind's responsive utilities
- Use `className` prop instead of `style` where possible

## Component Organization
- Place shared components in [components/](mdc:components)
- Use feature-specific component folders under route directories
- Example: [app/(drawer)/(tabs)/_components/](mdc:app/(drawer)/(tabs)/_components/)
- Break down complex components into smaller, reusable parts

## Error Handling
- Handle errors at the beginning of functions with early returns
- Use guard clauses for preconditions
- Implement proper error boundaries for React Native
- Provide user-friendly error messages

## Performance
- Use `React.memo` for expensive components
- Implement proper list rendering with `FlatList` or `SectionList`
- Optimize images with appropriate formats and lazy loading
- Minimize re-renders with proper dependency arrays
